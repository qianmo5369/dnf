{"version":3,"file":"pattern.js","sources":["uni_modules/tuniaoui-vue3/libs/async-validator/rule/pattern.ts"],"sourcesContent":["import type { ExecuteRule } from '../interface';\nimport { format } from '../util';\n\nconst pattern: ExecuteRule = (rule, value, source, errors, options) => {\n  if (rule.pattern) {\n    if (rule.pattern instanceof RegExp) {\n      // if a RegExp instance is passed, reset `lastIndex` in case its `global`\n      // flag is accidentally set to `true`, which in a validation scenario\n      // is not necessary and the result might be misleading\n      rule.pattern.lastIndex = 0;\n      if (!rule.pattern.test(value)) {\n        errors.push(\n          format(\n            options.messages.pattern.mismatch,\n            rule.fullField,\n            value,\n            rule.pattern,\n          ),\n        );\n      }\n    } else if (typeof rule.pattern === 'string') {\n      const _pattern = new RegExp(rule.pattern);\n      if (!_pattern.test(value)) {\n        errors.push(\n          format(\n            options.messages.pattern.mismatch,\n            rule.fullField,\n            value,\n            rule.pattern,\n          ),\n        );\n      }\n    }\n  }\n};\n\nexport default pattern;\n"],"names":["format"],"mappings":";;AAGA,MAAM,UAAuB,CAAC,MAAM,OAAO,QAAQ,QAAQ,YAAY;AACrE,MAAI,KAAK,SAAS;AACZ,QAAA,KAAK,mBAAmB,QAAQ;AAIlC,WAAK,QAAQ,YAAY;AACzB,UAAI,CAAC,KAAK,QAAQ,KAAK,KAAK,GAAG;AACtB,eAAA;AAAA,UACLA,kDAAA;AAAA,YACE,QAAQ,SAAS,QAAQ;AAAA,YACzB,KAAK;AAAA,YACL;AAAA,YACA,KAAK;AAAA,UACP;AAAA,QAAA;AAAA,MAEJ;AAAA,IACS,WAAA,OAAO,KAAK,YAAY,UAAU;AAC3C,YAAM,WAAW,IAAI,OAAO,KAAK,OAAO;AACxC,UAAI,CAAC,SAAS,KAAK,KAAK,GAAG;AAClB,eAAA;AAAA,UACLA,kDAAA;AAAA,YACE,QAAQ,SAAS,QAAQ;AAAA,YACzB,KAAK;AAAA,YACL;AAAA,YACA,KAAK;AAAA,UACP;AAAA,QAAA;AAAA,MAEJ;AAAA,IACF;AAAA,EACF;AACF;;"}