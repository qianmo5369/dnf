{"version":3,"file":"use-upload-handle-function.js","sources":["uni_modules/tuniaoui-vue3/components/image-upload/src/composables/use-upload-handle-function.ts"],"sourcesContent":["import { ref, watch } from 'vue'\nimport {\n  isArray,\n  isEmptyVariableInDefault,\n  isPromise,\n  isString,\n} from '../../../../utils'\nimport { isJsonString } from '../../../../utils/validator'\n\nimport type { ImageUploadFile, ImageUploadListItem } from '../types'\nimport type { ImageUploadProps } from '../image-upload'\n\nexport default function useUploadHandleFunction(props: ImageUploadProps) {\n  // 选择系统图片\n  const chooseImage = (count: number) => {\n    return new Promise<Array<ImageUploadFile>>((resolve, reject) => {\n      uni.chooseImage({\n        count,\n        sizeType: props.sizeType,\n        // extension: props.extensions,\n        sourceType: props.sourceType,\n        success: (res) => {\n          resolve(isArray(res.tempFiles) ? res.tempFiles : [res.tempFiles])\n        },\n        fail: (err) => {\n          reject(err)\n        },\n      })\n    })\n  }\n\n  // 上传图片事件，调用接口\n  // 正在上传标识\n  const uploading = ref(false)\n  watch(\n    () => uploading.value,\n    (val) => {\n      if (props.showErrorTips) {\n        if (val) uni.showLoading({ title: '上传中' })\n        else uni.hideLoading()\n      }\n    }\n  )\n  const uploadProcess = (item: ImageUploadListItem): Promise<boolean> => {\n    const { customUploadHandler, customUploadCallback } = props\n    if (uploading.value) return Promise.reject('有文件正在上传')\n\n    return new Promise((resolve, reject) => {\n      // 如果有自定义上传处理函数，则调用自定义上传处理函数\n      if (customUploadHandler) {\n        const uploadHandlerResult = customUploadHandler(item.file!)\n        const isUploadHandlePromiseOrString = [\n          isPromise(uploadHandlerResult),\n          isString(uploadHandlerResult),\n        ].includes(true)\n        if (!isUploadHandlePromiseOrString) {\n          console.error(\n            '[TnImageUpload]自定义上传处理函数必须返回Promise和String'\n          )\n          reject('自定义上传处理函数必须返回Promise和String')\n          return\n        }\n        uploading.value = true\n        item.status = 'uploading'\n\n        if (isPromise(uploadHandlerResult)) {\n          uploadHandlerResult\n            .then((res) => {\n              if (res) {\n                item.url = res\n                resolve(true)\n              } else {\n                resolve(false)\n              }\n            })\n            .catch((err) => {\n              console.error('[TnImageUpload]上传文件发生错误', err)\n              reject(err?.errMsg || '上传文件发生错误')\n            })\n            .finally(() => {\n              uploading.value = false\n            })\n        } else {\n          if (uploadHandlerResult) {\n            item.url = uploadHandlerResult\n            resolve(true)\n          } else {\n            resolve(false)\n          }\n          uploading.value = false\n        }\n      } else {\n        // 内部集成图片上传\n        uploading.value = true\n        item.status = 'uploading'\n\n        // 创建上传对象\n        const task = uni.uploadFile({\n          url: props.action!,\n          filePath: item.url,\n          name: props.name,\n          formData: props.formData,\n          header: props.header,\n          success: (res: UniApp.UploadFileSuccessCallbackResult) => {\n            // 判断用户是否自己处理上传后服务器回传的结果\n            if (customUploadCallback) {\n              const customUploadCallbackResult = customUploadCallback(res)\n              const isCustomUploadCallbackPromiseOrString = [\n                isPromise(customUploadCallbackResult),\n                isString(customUploadCallbackResult),\n              ].includes(true)\n              if (!isCustomUploadCallbackPromiseOrString) {\n                console.error(\n                  '[TnImageUpload]自定义上传回调函数必须返回Promise和String'\n                )\n                reject('自定义上传回调函数必须返回Promise和String')\n                return\n              }\n\n              if (isPromise(customUploadCallbackResult)) {\n                customUploadCallbackResult\n                  .then((res) => {\n                    if (res) {\n                      item.url = res\n                      resolve(true)\n                    } else {\n                      resolve(false)\n                    }\n                  })\n                  .catch((err) => {\n                    console.error('[TnImageUpload]上传文件发生错误', err)\n                    reject(err?.errMsg || '上传文件发生错误')\n                  })\n              } else {\n                if (customUploadCallbackResult) {\n                  item.url = customUploadCallbackResult\n                  resolve(true)\n                } else {\n                  resolve(false)\n                }\n              }\n            } else {\n              // 使用集成的上传回调函数\n              const { statusCode, data: resData } = res\n              if (![200, 201, 204].includes(statusCode)) {\n                console.error('[TnImageUpload]上传文件发生错误', res)\n                reject(res?.errMsg || '上传文件发生错误')\n                return\n              } else {\n                const data = isJsonString(resData)\n                  ? JSON.parse(resData)\n                  : resData\n                // 默认返回的格式为 { code: 200, data: { errorCode: 0,  url: '' } }\n                if (data.code === 200 && data.data.errCode === 0) {\n                  item.url = data.data.url\n                  resolve(true)\n                } else {\n                  console.error('[TnImageUpload]上传文件发生错误', res)\n                  reject(\n                    isEmptyVariableInDefault(\n                      data?.message,\n                      data?.msg || '上传文件发生错误'\n                    )\n                  )\n                }\n              }\n            }\n          },\n          fail: (err) => {\n            console.error('[TnImageUpload]上传文件发生错误', err)\n            reject(err?.errMsg || '上传文件发生错误')\n          },\n          complete: () => {\n            uploading.value = false\n            resolve(true)\n          },\n        })\n\n        item.uploadTask = task\n        // 监听上传进度\n        task.onProgressUpdate((res) => {\n          if (res.progress > 0) {\n            item.progress = res.progress\n          }\n        })\n      }\n    })\n  }\n\n  // 检查文件是否超过最大文件尺寸或者不符合上传文件类型\n  const checkFileSizeAndExtension = (files: Array<ImageUploadFile>) => {\n    const { extensions, maxSize } = props\n    // #ifdef MP-ALIPAY\n    extensions.push('image')\n    // #endif\n    const extReg = /.+\\./\n    return files.filter((item) => {\n      // 获取文件后缀名\n      let fileExt = ''\n      // #ifdef H5\n      fileExt = (item as File).name.replace(extReg, '').toLowerCase()\n      // #endif\n      // #ifndef H5\n      fileExt = (item as UniApp.ChooseImageSuccessCallbackResultFile).path\n        .replace(extReg, '')\n        .toLowerCase()\n      // #endif\n      return (\n        !extensions.some((ext) => ext.toLowerCase() === fileExt) ||\n        item.size > maxSize\n      )\n    })\n  }\n\n  // 是否显示错误提示\n  const showErrorTips = (msg: string) => {\n    if (!props.showErrorTips) return\n    uni.showToast({\n      icon: 'none',\n      title: msg,\n    })\n  }\n\n  return {\n    chooseImage,\n    uploadProcess,\n    checkFileSizeAndExtension,\n    showErrorTips,\n  }\n}\n"],"names":["uni","isArray","ref","watch","isPromise","isString","res","isJsonString","isEmptyVariableInDefault"],"mappings":"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"}