{"version":3,"file":"use-form-item-operation.js","sources":["uni_modules/tuniaoui-vue3/components/form/src/composables/use-form-item-operation.ts"],"sourcesContent":["import { computed, inject, nextTick, ref, watch } from 'vue'\nimport AsyncValidator from '../../../../libs/async-validator'\nimport { castArray, debounce } from '../../../../libs/lodash'\nimport { formContextKey } from '../../../../tokens'\nimport {\n  cloneDeep,\n  getProp,\n  isEmptyVariableInDefault,\n  isFunction,\n  isString,\n} from '../../../../utils'\n\nimport type { Slots } from 'vue'\nimport type { RuleItem } from '../../../../libs/async-validator'\nimport type { FormItemProps, FormItemValidateStates } from '../form-item'\nimport type {\n  FormItemContext,\n  FormItemRule,\n  FormValidateFailure,\n} from '../types'\nimport type { Arrayable } from '../../../../utils'\n\nexport const useFormItemOperation = (props: FormItemProps, slots: Slots) => {\n  const formContext = inject(formContextKey, undefined)\n\n  // 初始化的值\n  let initialValue: any = undefined\n  // 是否重置字段校验\n  let isResettingField = false\n\n  // 校验状态\n  const validateState = ref<FormItemValidateStates>('')\n  const validateStateDebounced = ref<FormItemValidateStates>('')\n\n  // 错误信息\n  const validateMessage = ref('')\n\n  // 是否有标签\n  const hasLabel = computed(() => {\n    return !!(props.label || slots.label)\n  })\n\n  // 当前标签的值\n  const currentLabel = computed(\n    () => `${props.label || ''}${formContext?.labelSuffix || ''}`\n  )\n\n  // formItem field字段名称\n  const fieldValue = computed(() => {\n    const model = formContext?.model\n    if (!model || !props.prop) {\n      return\n    }\n    return getProp(model, props.prop).value\n  })\n\n  // formItem prop字段名称\n  const propString = computed(() => {\n    if (!props.prop) return ''\n    return isString(props.prop) ? props.prop : props.prop.join('.')\n  })\n\n  // 校验规则\n  const normalizedRules = computed(() => {\n    const rules: FormItemRule[] = []\n    // 如果设置了rules，则直接使用rules\n    if (props.rules) rules.push(...castArray(props.rules))\n\n    // 如果设置了prop，则根据prop从formContext中获取rules\n    const formRules = formContext?.rules\n    if (formRules && props.prop) {\n      const _rules = getProp<Arrayable<FormItemRule> | undefined>(\n        formRules,\n        props.prop\n      ).value\n      if (_rules) rules.push(...castArray(_rules))\n    }\n\n    // 如果设置了required，则根据required的值来设置校验规则\n    if (props.required !== undefined) {\n      const requiredRules = rules\n        .map((rule, index) => [rule, index] as const)\n        .filter(([rule]) => Object.keys(rule).includes('required'))\n      if (requiredRules.length) {\n        for (const [rule, index] of requiredRules) {\n          if (rule.required === props.required) continue\n          rules[index] = { ...rule, required: props.required }\n        }\n      } else {\n        rules.push({ required: props.required })\n      }\n    }\n\n    return rules\n  })\n\n  // 是否需要校验（开启校验）\n  const validateEnabled = computed(() => normalizedRules.value.length > 0)\n\n  // 是否为必填\n  const isRequired = computed(() =>\n    normalizedRules.value.some((rule) => rule.required)\n  )\n\n  // 是否显示错误信息\n  const shouldShowError = computed(\n    () =>\n      validateStateDebounced.value === 'error' &&\n      props.showMessage &&\n      isEmptyVariableInDefault(formContext?.showMessage, true)\n  )\n\n  // 设置校验状态\n  const setValidateState = (state: FormItemValidateStates) => {\n    validateState.value = state\n  }\n\n  // 获取校验规则\n  const getFilterRule = (trigger: string) => {\n    const rules = normalizedRules.value\n    return (\n      rules\n        .filter((rule) => {\n          if (!rule.trigger || !trigger) return true\n          if (Array.isArray(rule.trigger)) {\n            return rule.trigger.includes(trigger)\n          } else {\n            return rule.trigger === trigger\n          }\n        })\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        .map(({ trigger, ...rule }): RuleItem => rule)\n    )\n  }\n\n  // 校验失败\n  const onValidationFailed = (error: FormValidateFailure) => {\n    const { errors, fields } = error\n    if (!errors || !fields) {\n      console.error(error)\n    }\n\n    setValidateState('error')\n    validateMessage.value = errors\n      ? isEmptyVariableInDefault(errors?.[0]?.message, `${props.prop} 为必填项`)\n      : ''\n\n    formContext?.emits('validate', props.prop!, false, validateMessage.value)\n  }\n\n  // 校验通过\n  const onValidationSucceded = () => {\n    setValidateState('success')\n    validateMessage.value = ''\n\n    formContext?.emits('validate', props.prop!, true, '')\n  }\n\n  // 进行校验操作\n  const doValidate = async (rules: RuleItem[]): Promise<true> => {\n    const modelName = propString.value\n    const validator = new AsyncValidator({\n      [modelName]: rules,\n    })\n    return validator\n      .validate({ [modelName]: fieldValue.value }, { firstFields: true })\n      .then(() => {\n        onValidationSucceded()\n        return true as const\n      })\n      .catch((err: FormValidateFailure) => {\n        onValidationFailed(err as FormValidateFailure)\n        return Promise.reject(err)\n      })\n  }\n\n  // 校验\n  const validate: FormItemContext['validate'] = async (trigger, callback) => {\n    // 重置字段后跳过校验\n    if (isResettingField || !props.prop) return false\n\n    const hasCallback = isFunction(callback)\n    if (!validateEnabled.value) {\n      callback?.(false)\n      return false\n    }\n\n    const rules = getFilterRule(trigger)\n    if (rules.length === 0) {\n      callback?.(true)\n      return true\n    }\n\n    setValidateState('validating')\n\n    return doValidate(rules)\n      .then(() => {\n        callback?.(true)\n        return true as const\n      })\n      .catch((err: FormValidateFailure) => {\n        const { fields } = err\n        callback?.(false, fields)\n        return hasCallback ? false : Promise.reject(fields)\n      })\n  }\n\n  // 清除校验信息\n  const clearValidate: FormItemContext['clearValidate'] = () => {\n    setValidateState('')\n    validateMessage.value = ''\n    isResettingField = false\n  }\n\n  // 重置字段\n  const resetField: FormItemContext['resetField'] = async () => {\n    const model = formContext?.model\n    if (!model || !props.prop) return\n\n    const computedValue = getProp(model, props.prop)\n\n    // 阻止触发校验\n    isResettingField = true\n\n    computedValue.value = cloneDeep(initialValue)\n\n    await nextTick()\n    clearValidate()\n\n    isResettingField = false\n  }\n\n  // 设置初始化的值\n  const initFieldValue = () => {\n    initialValue = cloneDeep(fieldValue.value)\n  }\n\n  const validateStateDebouncedUpdater = debounce(() => {\n    validateStateDebounced.value = validateState.value\n  }, 100)\n  watch(\n    () => validateState.value,\n    () => validateStateDebouncedUpdater()\n  )\n\n  watch(\n    () => props.error,\n    (val) => {\n      validateMessage.value = val || ''\n      setValidateState(val ? 'error' : '')\n    },\n    {\n      immediate: true,\n    }\n  )\n\n  watch(\n    () => props.validateStatus,\n    (val) => {\n      setValidateState(val || '')\n    }\n  )\n\n  return {\n    formContext,\n    hasLabel,\n    currentLabel,\n    validateState,\n    validateMessage,\n    isRequired,\n    shouldShowError,\n    doValidate,\n    validate,\n    clearValidate,\n    resetField,\n    initFieldValue,\n  }\n}\n"],"names":["inject","formContextKey","ref","computed","getProp","isString","castArray","isEmptyVariableInDefault","trigger","uni","AsyncValidator","isFunction","cloneDeep","nextTick","debounce","watch"],"mappings":"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"}