{"version":3,"file":"index.js","sources":["uni_modules/tuniaoui-vue3/utils/validator/index.ts"],"sourcesContent":["/**\n * 验证电子邮箱格式\n */\nexport const isEmail = (value: string): boolean => {\n  return /[\\w!#$%&'*+/=?^_`{|}~-]+(?:\\.[\\w!#$%&'*+/=?^_`{|}~-]+)*@(?:[\\w](?:[\\w-]*[\\w])?\\.)+[\\w](?:[\\w-]*[\\w])?/.test(\n    value\n  )\n}\n\n/**\n * 验证手机格式\n */\nexport const isMobile = (value: string): boolean => {\n  return /^1[3-9]\\d{9}$/.test(value)\n}\n\n/**\n * 验证URL格式\n */\nexport const isUrl = (value: string): boolean => {\n  return /http(s)?:\\/\\/([\\w-]+\\.)+[\\w-]+(\\/[\\w-./?%&=]*)?/.test(value)\n}\n\n/**\n * 验证日期格式\n */\nexport const isDate = (value: string): boolean => {\n  return !/Invalid|NaN/.test(new Date(value).toString())\n}\n\n/**\n * 验证ISO类型的日期格式\n */\nexport const isDateISO = (value: string): boolean => {\n  return /^\\d{4}[/-](0?[1-9]|1[012])[/-](0?[1-9]|[12][0-9]|3[01])$/.test(value)\n}\n\n/**\n * 验证十进制数字\n */\nexport const isNumber = (value: string): boolean => {\n  // eslint-disable-next-line no-useless-escape\n  return /^[\\+-]?(\\d+\\.?\\d*|\\.\\d+|\\d\\.\\d+e\\+\\d+)$/.test(value)\n}\n\n/**\n * 验证整数\n */\nexport const isDigits = (value: string): boolean => {\n  return /^\\d+$/.test(value)\n}\n\n/**\n * 验证身份证号码\n */\nexport const isIdCard = (value: string): boolean => {\n  return /^[1-9]\\d{5}[1-9]\\d{3}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}([0-9]|X)$/.test(\n    value\n  )\n}\n\n/**\n * 是否车牌号\n */\nexport const isCarNo = (value: string): boolean => {\n  // 新能源车牌\n  const xreg =\n    /^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]{1}[A-Z]{1}(([0-9]{5}[DF]$)|([DF][A-HJ-NP-Z0-9][0-9]{4}$))/\n  // 旧车牌\n  const creg =\n    /^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]{1}[A-Z]{1}[A-HJ-NP-Z0-9]{4}[A-HJ-NP-Z0-9挂学警港澳]{1}$/\n  if (value.length === 7) {\n    return creg.test(value)\n  } else if (value.length === 8) {\n    return xreg.test(value)\n  } else {\n    return false\n  }\n}\n\n/**\n * 金额,只允许2位小数\n */\nexport const isAmount = (value: string): boolean => {\n  //金额，只允许保留两位小数\n  return /^[1-9]\\d*(,\\d{3})*(\\.\\d{1,2})?$|^0\\.\\d{1,2}$/.test(value)\n}\n\n/**\n * 中文\n */\nexport const isChinese = (value: string): boolean => {\n  // eslint-disable-next-line unicorn/escape-case\n  const reg = /^[\\u4e00-\\u9fa5]+$/gi\n  return reg.test(value)\n}\n\n/**\n * 只能输入字母\n */\nexport const isLetter = (value: string): boolean => {\n  return /^[a-zA-Z]*$/.test(value)\n}\n\n/**\n * 只能是字母或者数字\n */\nexport const isEnOrNum = (value: string): boolean => {\n  //英文或者数字\n  const reg = /^[0-9a-zA-Z]*$/g\n  return reg.test(value)\n}\n\n/**\n * 验证是否包含某个值\n */\nexport const isContains = (value: string, param: string): boolean => {\n  return value.includes(param)\n}\n\n/**\n * 验证一个值范围[min, max]\n */\nexport const isRange = (\n  value: string | number,\n  param: (string | number)[]\n): boolean => {\n  return value >= param[0] && value <= param[1]\n}\n\n/**\n * 验证一个长度范围[min, max]\n */\nexport const isRangeLength = (\n  value: string,\n  param: (string | number)[]\n): boolean => {\n  return value.length >= Number(param[0]) && value.length <= Number(param[1])\n}\n\n/**\n * 是否固定电话\n */\nexport const isLandline = (value: string): boolean => {\n  const reg = /^\\d{3,4}-\\d{7,8}(-\\d{3,4})?$/\n  return reg.test(value)\n}\n\n/**\n * 判断是否为空\n */\nexport const isEmpty = (value: any): boolean => {\n  switch (typeof value) {\n    case 'undefined':\n      return true\n    case 'string':\n      if (value.replace(/(^[ \\t\\n\\r]*)|([ \\t\\n\\r]*$)/g, '').length == 0)\n        return true\n      break\n    case 'boolean':\n      if (!value) return true\n      break\n    case 'number':\n      if (0 === value || Number.isNaN(value)) return true\n      break\n    case 'object':\n      if (null === value) return true\n      if (Object.keys(value).length === 0) return true\n      return false\n  }\n  return false\n}\n\n/**\n * 是否json字符串\n */\nexport const isJsonString = (value: string): boolean => {\n  if (typeof value == 'string') {\n    try {\n      const obj = JSON.parse(value)\n      if (typeof obj == 'object' && obj) {\n        return true\n      } else {\n        return false\n      }\n      // eslint-disable-next-line unicorn/prefer-optional-catch-binding\n    } catch (e) {\n      return false\n    }\n  }\n  return false\n}\n\n/**\n * 是否短信验证码\n */\nexport const isMessageCode = (value: string, len = 6): boolean => {\n  return new RegExp(`^\\\\d{${len}}$`).test(value)\n}\n"],"names":[],"mappings":";AAgLa,MAAA,eAAe,CAAC,UAA2B;AAClD,MAAA,OAAO,SAAS,UAAU;AACxB,QAAA;AACI,YAAA,MAAM,KAAK,MAAM,KAAK;AACxB,UAAA,OAAO,OAAO,YAAY,KAAK;AAC1B,eAAA;AAAA,MAAA,OACF;AACE,eAAA;AAAA,MACT;AAAA,aAEO,GAAG;AACH,aAAA;AAAA,IACT;AAAA,EACF;AACO,SAAA;AACT;;"}